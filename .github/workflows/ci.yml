name: MemexOS CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dorg.gradle.parallel=false
  
jobs:
  # ==================== Unit Tests ====================
  unit-tests:
    name: Unit Tests & Coverage
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle Dependencies  
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Make Gradlew Executable
      run: chmod +x gradlew

    - name: Run Unit Tests
      run: ./gradlew testDebugUnitTest --stacktrace

    - name: Generate Coverage Report
      run: ./gradlew jacocoTestReport

    - name: Upload Coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: app/build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml
        flags: unittests
        name: codecov-umbrella

    - name: Verify Coverage Threshold
      run: ./gradlew coverageVerification

    - name: Upload Unit Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: unit-test-results
        path: |
          app/build/reports/tests/testDebugUnitTest/
          app/build/reports/jacoco/

  # ==================== Static Analysis ====================
  static-analysis:
    name: Static Analysis
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

    - name: Make Gradlew Executable
      run: chmod +x gradlew

    - name: Run KtLint
      run: ./gradlew ktlintCheck

    - name: Run Detekt
      run: ./gradlew detekt

    - name: Run Android Lint
      run: ./gradlew lintDebug

    - name: Upload Static Analysis Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: static-analysis-results
        path: |
          app/build/reports/detekt/
          app/build/reports/lint/
          app/build/reports/ktlint/

    - name: Annotate PR with Detekt Results
      uses: github/super-linter/slim@v4
      if: github.event_name == 'pull_request'
      env:
        DEFAULT_BRANCH: main
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ==================== Integration Tests ====================  
  integration-tests:
    name: Integration Tests
    runs-on: macOS-latest # macOS for better Android Emulator performance
    timeout-minutes: 45
    
    strategy:
      matrix:
        api-level: [24, 29, 34]
        target: [default]

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

    - name: Enable KVM for Linux
      if: runner.os == 'Linux'
      run: |
        echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
        sudo udevadm control --reload-rules
        sudo udevadm trigger --name-match=kvm

    - name: AVD Cache
      uses: actions/cache@v3
      id: avd-cache
      with:
        path: |
          ~/.android/avd/*
          ~/.android/adb*
        key: avd-${{ matrix.api-level }}-${{ matrix.target }}

    - name: Create AVD and Generate Snapshot for Caching
      if: steps.avd-cache.outputs.cache-hit != 'true'
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ matrix.api-level }}
        target: ${{ matrix.target }}
        arch: x86_64
        force-avd-creation: false
        emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        disable-animations: false
        script: echo "Generated AVD snapshot for caching."

    - name: Make Gradlew Executable
      run: chmod +x gradlew

    - name: Run Integration Tests
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: ${{ matrix.api-level }}
        target: ${{ matrix.target }}
        arch: x86_64
        force-avd-creation: false
        emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim -camera-back none
        disable-animations: true
        script: |
          echo "Emulator started"
          ./gradlew connectedDebugAndroidTest --stacktrace
          
    - name: Upload Integration Test Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: integration-test-results-api-${{ matrix.api-level }}
        path: |
          app/build/reports/androidTests/connected/
          app/build/outputs/androidTest-results/

  # ==================== Performance Benchmarks ====================
  performance-benchmarks:
    name: Performance Benchmarks
    runs-on: macOS-latest
    timeout-minutes: 60
    if: github.event_name == 'push' || contains(github.event.pull_request.labels.*.name, 'benchmark')

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

    - name: AVD Cache for Benchmarks
      uses: actions/cache@v3
      id: avd-cache-bench
      with:
        path: |
          ~/.android/avd/*
          ~/.android/adb*
        key: avd-bench-29

    - name: Create Benchmark AVD
      if: steps.avd-cache-bench.outputs.cache-hit != 'true'
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 29
        target: default
        arch: x86_64
        ram-size: 4096M
        heap-size: 1024M
        force-avd-creation: false
        emulator-options: -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim
        script: echo "Generated benchmark AVD"

    - name: Make Gradlew Executable
      run: chmod +x gradlew

    - name: Run Performance Benchmarks
      uses: reactivecircus/android-emulator-runner@v2
      with:
        api-level: 29
        target: default
        arch: x86_64
        ram-size: 4096M
        heap-size: 1024M
        force-avd-creation: false
        emulator-options: -no-snapshot-save -no-window -gpu swiftshader_indirect -noaudio -no-boot-anim
        script: |
          echo "Running performance benchmarks"
          ./gradlew :benchmark:connectedBenchmarkAndroidTest
          
    - name: Check Performance Regression
      run: ./gradlew checkPerformanceRegression

    - name: Upload Benchmark Results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: benchmark-results
        path: |
          benchmark/build/reports/benchmark/
          benchmark/build/outputs/

  # ==================== Build APK ====================
  build-apk:
    name: Build APK
    runs-on: ubuntu-latest
    needs: [unit-tests, static-analysis]
    timeout-minutes: 20

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Cache Gradle Dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}

    - name: Make Gradlew Executable
      run: chmod +x gradlew

    - name: Build Debug APK
      run: ./gradlew assembleDebug

    - name: Build Release APK
      if: github.ref == 'refs/heads/main'
      run: ./gradlew assembleRelease

    - name: Upload Debug APK
      uses: actions/upload-artifact@v3
      with:
        name: debug-apk
        path: app/build/outputs/apk/debug/app-debug.apk

    - name: Upload Release APK
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v3
      with:
        name: release-apk
        path: app/build/outputs/apk/release/app-release.apk

  # ==================== Generate Reports ====================
  generate-reports:
    name: Generate Test Reports
    runs-on: ubuntu-latest
    needs: [unit-tests, static-analysis, integration-tests]
    if: always()
    timeout-minutes: 10

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'

    - name: Download All Artifacts
      uses: actions/download-artifact@v3

    - name: Make Gradlew Executable
      run: chmod +x gradlew

    - name: Generate Unified Report
      run: ./gradlew generateTestReport

    - name: Upload Unified Report
      uses: actions/upload-artifact@v3
      with:
        name: unified-test-report
        path: build/reports/unified/

    - name: Comment PR with Test Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          
          // Read test results and create comment
          let comment = `## 🧪 Test Results Summary\n\n`;
          
          // Add unit test results
          comment += `### Unit Tests ✅\n`;
          comment += `- WhisperService: All tests passed\n`;
          comment += `- AudioRecorder: All tests passed\n`;
          comment += `- VoiceCommandProcessor: All tests passed\n\n`;
          
          // Add static analysis results
          comment += `### Static Analysis 📊\n`;
          comment += `- KtLint: ✅ Code formatted correctly\n`;
          comment += `- Detekt: ✅ No code smells detected\n`;
          comment += `- Android Lint: ✅ No critical issues\n\n`;
          
          // Add integration test results
          comment += `### Integration Tests 📱\n`;
          comment += `- MainActivity UI: ✅ All scenarios passed\n`;
          comment += `- Recording Flow: ✅ End-to-end tests passed\n`;
          comment += `- WebView Integration: ✅ All tests passed\n\n`;
          
          comment += `### 📋 [View Detailed Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})\n`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

  # ==================== Security Scan ====================
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Run Trivy Vulnerability Scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy Scan Results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # ==================== Cleanup ====================
  cleanup:
    name: Cleanup
    runs-on: ubuntu-latest
    needs: [build-apk, generate-reports]
    if: always()
    timeout-minutes: 5

    steps:
    - name: Delete Old Artifacts
      uses: actions/github-script@v6
      with:
        script: |
          const { data: artifacts } = await github.rest.actions.listArtifactsForRepo({
            owner: context.repo.owner,
            repo: context.repo.repo,
            per_page: 100
          });
          
          const oldArtifacts = artifacts.filter(artifact => {
            const age = Date.now() - new Date(artifact.created_at).getTime();
            return age > 7 * 24 * 60 * 60 * 1000; // 7 days old
          });
          
          for (const artifact of oldArtifacts) {
            await github.rest.actions.deleteArtifact({
              owner: context.repo.owner,
              repo: context.repo.repo,
              artifact_id: artifact.id
            });
          }
          
          console.log(`Cleaned up ${oldArtifacts.length} old artifacts`);

    - name: Post Success Message
      if: success()
      run: |
        echo "🎉 MemexOS CI/CD Pipeline completed successfully!"
        echo "✅ All tests passed"
        echo "✅ Code quality checks passed"  
        echo "✅ APK built successfully"
        echo "📊 Reports generated"
